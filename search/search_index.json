{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u26a1 RoundBox A small lightweight framework for IoT applications, with main goal to not reinvent the wheel every time when a small project for IoT device is needed. The framework contains all tools necessary to bootstrap and run a command a single time or using linux crontab. You can create apps as many as you like and use them for your proper necessity, but consider that each app is liake a small container with logic. Each app has the possibility to host specific commands that will be available when running manage.py. \ud83c\udf88 Special thanks \ud83c\udf88 To build this framework I have used code inspired by the Django project and also from Home Assistant project. Both projects have a strong code base and lightweight and port on different projects. \ud83d\udd27 Installation The easy way to install RoundBox framework is with pip $ pip install roundbox If you want to install RoundBox from GitHub use: $ pip install git+https://github.com/soulraven/roundbox.git For more detailed install instructions see how Install and configure the framework. \u27bf Variables set the ROUNDBOX_COLORS environment variable to specify the palette you want to use. For example, to specify the light palette under a Unix or OS/X BASH shell, you would run the following at a command prompt: export ROUNDBOX_COLORS = \"light\" \ud83d\udd87 Library used A more detailed list you will find here: Libraries \ud83c\udf0d Contributions Contributions of all forms are welcome :) Pull requests are welcome. For major changes, please open an issue first to discuss what you would like to change. Please make sure to update tests as appropriate. \ud83d\udcdd License This project is licensed under GPLv3 . \ud83d\udc40 Author Zaharia Constantin, my GitHub profile and GitHub Page","title":"Home"},{"location":"#roundbox","text":"A small lightweight framework for IoT applications, with main goal to not reinvent the wheel every time when a small project for IoT device is needed. The framework contains all tools necessary to bootstrap and run a command a single time or using linux crontab. You can create apps as many as you like and use them for your proper necessity, but consider that each app is liake a small container with logic. Each app has the possibility to host specific commands that will be available when running manage.py.","title":"\u26a1 RoundBox"},{"location":"#special-thanks","text":"To build this framework I have used code inspired by the Django project and also from Home Assistant project. Both projects have a strong code base and lightweight and port on different projects.","title":"\ud83c\udf88 Special thanks \ud83c\udf88"},{"location":"#installation","text":"The easy way to install RoundBox framework is with pip $ pip install roundbox If you want to install RoundBox from GitHub use: $ pip install git+https://github.com/soulraven/roundbox.git For more detailed install instructions see how Install and configure the framework.","title":"\ud83d\udd27 Installation"},{"location":"#variables","text":"set the ROUNDBOX_COLORS environment variable to specify the palette you want to use. For example, to specify the light palette under a Unix or OS/X BASH shell, you would run the following at a command prompt: export ROUNDBOX_COLORS = \"light\"","title":"\u27bf Variables"},{"location":"#library-used","text":"A more detailed list you will find here: Libraries","title":"\ud83d\udd87 Library used"},{"location":"#contributions","text":"Contributions of all forms are welcome :) Pull requests are welcome. For major changes, please open an issue first to discuss what you would like to change. Please make sure to update tests as appropriate.","title":"\ud83c\udf0d Contributions"},{"location":"#license","text":"This project is licensed under GPLv3 .","title":"\ud83d\udcdd License"},{"location":"#author","text":"Zaharia Constantin, my GitHub profile and GitHub Page","title":"\ud83d\udc40 Author"},{"location":"AUTHORS/","text":"Authors A huge thanks to all of our contributors: Zaharia Constantin","title":"AUTHORS"},{"location":"AUTHORS/#authors","text":"A huge thanks to all of our contributors: Zaharia Constantin","title":"Authors"},{"location":"credits/","text":"Credits These projects were used to build RoundBox . Thank you! python Direct dependencies colorama | python | slugify | watchdog More credits from the author","title":"Credits"},{"location":"credits/#credits","text":"These projects were used to build RoundBox . Thank you! python","title":"Credits"},{"location":"credits/#direct-dependencies","text":"colorama | python | slugify | watchdog More credits from the author","title":"Direct dependencies"},{"location":"libraries/","text":"Libraries used for this project Markdown As a guide for formatting the Markdown files: Markdown Guide Official list for Third Party Extensions Used Markdown extensions: - MkDocs Plugins Official list for MkDocs Plugins : Used Mkdocs plugins: MkDocs Material for MkDocs PyMdown Extensions Documentation mkdocs-pagenav-generator MkDocs Awesome Pages MkDocs Coverage mkdocs-literate-nav mkdocs-gen-files","title":"Libraries"},{"location":"libraries/#libraries-used-for-this-project","text":"","title":"Libraries used for this project"},{"location":"libraries/#markdown","text":"As a guide for formatting the Markdown files: Markdown Guide Official list for Third Party Extensions Used Markdown extensions: -","title":"Markdown"},{"location":"libraries/#mkdocs-plugins","text":"Official list for MkDocs Plugins : Used Mkdocs plugins: MkDocs Material for MkDocs PyMdown Extensions Documentation mkdocs-pagenav-generator MkDocs Awesome Pages MkDocs Coverage mkdocs-literate-nav mkdocs-gen-files","title":"MkDocs Plugins"},{"location":"license/","text":"GNU GENERAL PUBLIC LICENSE Version 3, 29 June 2007 Copyright (C) 2007 Free Software Foundation, Inc. https://fsf.org/ Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed. Preamble The GNU General Public License is a free, copyleft license for software and other kinds of works. The licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users. We, the Free Software Foundation, use the GNU General Public License for most of our software; it applies also to any other work released this way by its authors. You can apply it to your programs, too. When we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things. To protect your rights, we need to prevent others from denying you these rights or asking you to surrender the rights. Therefore, you have certain responsibilities if you distribute copies of the software, or if you modify it: responsibilities to respect the freedom of others. For example, if you distribute copies of such a program, whether gratis or for a fee, you must pass on to the recipients the same freedoms that you received. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights. Developers that use the GNU GPL protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License giving you legal permission to copy, distribute and/or modify it. For the developers' and authors' protection, the GPL clearly explains that there is no warranty for this free software. For both users' and authors' sake, the GPL requires that modified versions be marked as changed, so that their problems will not be attributed erroneously to authors of previous versions. Some devices are designed to deny users access to install or run modified versions of the software inside them, although the manufacturer can do so. This is fundamentally incompatible with the aim of protecting users' freedom to change the software. The systematic pattern of such abuse occurs in the area of products for individuals to use, which is precisely where it is most unacceptable. Therefore, we have designed this version of the GPL to prohibit the practice for those products. If such problems arise substantially in other domains, we stand ready to extend this provision to those domains in future versions of the GPL, as needed to protect the freedom of users. Finally, every program is threatened constantly by software patents. States should not allow patents to restrict development and use of software on general-purpose computers, but in those that do, we wish to avoid the special danger that patents applied to a free program could make it effectively proprietary. To prevent this, the GPL assures that patents cannot be used to render the program non-free. The precise terms and conditions for copying, distribution and modification follow. TERMS AND CONDITIONS Definitions. \"This License\" refers to version 3 of the GNU General Public License. \"Copyright\" also means copyright-like laws that apply to other kinds of works, such as semiconductor masks. \"The Program\" refers to any copyrightable work licensed under this License. Each licensee is addressed as \"you\". \"Licensees\" and \"recipients\" may be individuals or organizations. To \"modify\" a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a \"modified version\" of the earlier work or a work \"based on\" the earlier work. A \"covered work\" means either the unmodified Program or a work based on the Program. To \"propagate\" a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well. To \"convey\" a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying. An interactive user interface displays \"Appropriate Legal Notices\" to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion. Source Code. The \"source code\" for a work means the preferred form of the work for making modifications to it. \"Object code\" means any non-source form of a work. A \"Standard Interface\" means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language. The \"System Libraries\" of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A \"Major Component\", in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it. The \"Corresponding Source\" for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work's System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work. The Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source. The Corresponding Source for a work in source code form is that same work. Basic Permissions. All rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law. You may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you. Conveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary. Protecting Users' Legal Rights From Anti-Circumvention Law. No covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures. When you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures. Conveying Verbatim Copies. You may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program. You may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee. Conveying Modified Source Versions. You may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions: a) The work must carry prominent notices stating that you modified it, and giving a relevant date. b) The work must carry prominent notices stating that it is released under this License and any conditions added under section 7. This requirement modifies the requirement in section 4 to \"keep intact all notices\". c) You must license the entire work, as a whole, under this License to anyone who comes into possession of a copy. This License will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. This License gives no permission to license the work in any other way, but it does not invalidate such permission if you have separately received it. d) If the work has interactive user interfaces, each must display Appropriate Legal Notices; however, if the Program has interactive interfaces that do not display Appropriate Legal Notices, your work need not make them do so. A compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an \"aggregate\" if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation's users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate. Conveying Non-Source Forms. You may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways: a) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by the Corresponding Source fixed on a durable physical medium customarily used for software interchange. b) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by a written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that product model, to give anyone who possesses the object code either (1) a copy of the Corresponding Source for all the software in the product that is covered by this License, on a durable physical medium customarily used for software interchange, for a price no more than your reasonable cost of physically performing this conveying of source, or (2) access to copy the Corresponding Source from a network server at no charge. c) Convey individual copies of the object code with a copy of the written offer to provide the Corresponding Source. This alternative is allowed only occasionally and noncommercially, and only if you received the object code with such an offer, in accord with subsection 6b. d) Convey the object code by offering access from a designated place (gratis or for a charge), and offer equivalent access to the Corresponding Source in the same way through the same place at no further charge. You need not require recipients to copy the Corresponding Source along with the object code. If the place to copy the object code is a network server, the Corresponding Source may be on a different server (operated by you or a third party) that supports equivalent copying facilities, provided you maintain clear directions next to the object code saying where to find the Corresponding Source. Regardless of what server hosts the Corresponding Source, you remain obligated to ensure that it is available for as long as needed to satisfy these requirements. e) Convey the object code using peer-to-peer transmission, provided you inform other peers where the object code and Corresponding Source of the work are being offered to the general public at no charge under subsection 6d. A separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work. A \"User Product\" is either (1) a \"consumer product\", which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, \"normally used\" refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product. \"Installation Information\" for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made. If you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM). The requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network. Corresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying. Additional Terms. \"Additional permissions\" are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions. When you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission. Notwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms: a) Disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this License; or b) Requiring preservation of specified reasonable legal notices or author attributions in that material or in the Appropriate Legal Notices displayed by works containing it; or c) Prohibiting misrepresentation of the origin of that material, or requiring that modified versions of such material be marked in reasonable ways as different from the original version; or d) Limiting the use for publicity purposes of names of licensors or authors of the material; or e) Declining to grant rights under trademark law for use of some trade names, trademarks, or service marks; or f) Requiring indemnification of licensors and authors of that material by anyone who conveys the material (or modified versions of it) with contractual assumptions of liability to the recipient, for any liability that these contractual assumptions directly impose on those licensors and authors. All other non-permissive additional terms are considered \"further restrictions\" within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying. If you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms. Additional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way. Termination. You may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11). However, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation. Moreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice. Termination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10. Acceptance Not Required for Having Copies. You are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so. Automatic Licensing of Downstream Recipients. Each time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License. An \"entity transaction\" is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party's predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts. You may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it. Patents. A \"contributor\" is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor's \"contributor version\". A contributor's \"essential patent claims\" are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, \"control\" includes the right to grant patent sublicenses in a manner consistent with the requirements of this License. Each contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor's essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version. In the following three paragraphs, a \"patent license\" is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To \"grant\" such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party. If you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. \"Knowingly relying\" means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient's use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid. If, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it. A patent license is \"discriminatory\" if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007. Nothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law. No Surrender of Others' Freedom. If conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program. Use with the GNU Affero General Public License. Notwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU Affero General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the special requirements of the GNU Affero General Public License, section 13, concerning interaction through a network will apply to the combination as such. Revised Versions of this License. The Free Software Foundation may publish revised and/or new versions of the GNU General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns. Each version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU General Public License \"or any later version\" applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU General Public License, you may choose any version ever published by the Free Software Foundation. If the Program specifies that a proxy can decide which future versions of the GNU General Public License can be used, that proxy's public statement of acceptance of a version permanently authorizes you to choose that version for the Program. Later license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version. Disclaimer of Warranty. THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION. Limitation of Liability. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. Interpretation of Sections 15 and 16. If the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee. END OF TERMS AND CONDITIONS How to Apply These Terms to Your New Programs If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms. To do so, attach the following notices to the program. It is safest to attach them to the start of each source file to most effectively state the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found. <one line to give the program's name and a brief idea of what it does.> Copyright (C) <year> <name of author> This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see <https://www.gnu.org/licenses/>. Also add information on how to contact you by electronic and paper mail. If the program does terminal interaction, make it output a short notice like this when it starts in an interactive mode: <program> Copyright (C) <year> <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details. The hypothetical commands show w' and show c' should show the appropriate parts of the General Public License. Of course, your program's commands might be different; for a GUI interface, you would use an \"about box\". You should also get your employer (if you work as a programmer) or school, if any, to sign a \"copyright disclaimer\" for the program, if necessary. For more information on this, and how to apply and follow the GNU GPL, see https://www.gnu.org/licenses/ . The GNU General Public License does not permit incorporating your program into proprietary programs. If your program is a subroutine library, you may consider it more useful to permit linking proprietary applications with the library. If this is what you want to do, use the GNU Lesser General Public License instead of this License. But first, please read https://www.gnu.org/licenses/why-not-lgpl.html .","title":"License"},{"location":"faq/","text":"Frequently Asked Questions Installation How do I get started? Download the code Install RoundBox Check out the rest of the documentation, and ask questions if you run into trouble. What are RoundBox's prerequisites? RoundBox requires Python . See the table in the next question for the versions of Python that work with each version of RoundBox. Other Python libraries may be required for some use cases, but you'll receive an error about them as they're needed. What Python version can I use with RoundBox? RoundBox version Python versions 1.0 >=3.10 For each version of Python, only the latest micro release (A.B.C) is officially supported. You can find the latest micro version for each series on the Python download page . What Python version should I use with RoundBox? Since newer versions of Python are often faster, have more features, and are better supported, the latest version of Python 3 is recommended. You don't lose anything in RoundBox by using an older release, but you don't take advantage of the improvements and optimizations in newer Python releases. Third-party applications for use with RoundBox are free to set their own version requirements. Should I use the stable version or development version? Generally, if you're using code in production, you should be using a stable release. The RoundBox project publishes a full stable release every nine months or so, with bugfix updates in between. These stable releases contain the API that is covered by our backwards compatibility guarantees; if you write code against stable releases, you shouldn't have any problems upgrading when the next official version is released.","title":"FAQ"},{"location":"faq/#frequently-asked-questions","text":"Installation","title":"Frequently Asked Questions"},{"location":"faq/#how-do-i-get-started","text":"Download the code Install RoundBox Check out the rest of the documentation, and ask questions if you run into trouble.","title":"How do I get started?"},{"location":"faq/#what-are-roundboxs-prerequisites","text":"RoundBox requires Python . See the table in the next question for the versions of Python that work with each version of RoundBox. Other Python libraries may be required for some use cases, but you'll receive an error about them as they're needed.","title":"What are RoundBox's prerequisites?"},{"location":"faq/#what-python-version-can-i-use-with-roundbox","text":"RoundBox version Python versions 1.0 >=3.10 For each version of Python, only the latest micro release (A.B.C) is officially supported. You can find the latest micro version for each series on the Python download page .","title":"What Python version can I use with RoundBox?"},{"location":"faq/#what-python-version-should-i-use-with-roundbox","text":"Since newer versions of Python are often faster, have more features, and are better supported, the latest version of Python 3 is recommended. You don't lose anything in RoundBox by using an older release, but you don't take advantage of the improvements and optimizations in newer Python releases. Third-party applications for use with RoundBox are free to set their own version requirements.","title":"What Python version should I use with RoundBox?"},{"location":"faq/#should-i-use-the-stable-version-or-development-version","text":"Generally, if you're using code in production, you should be using a stable release. The RoundBox project publishes a full stable release every nine months or so, with bugfix updates in between. These stable releases contain the API that is covered by our backwards compatibility guarantees; if you write code against stable releases, you shouldn't have any problems upgrading when the next official version is released.","title":"Should I use the stable version or development version?"},{"location":"faq/install/","text":"How do I get started? Download the code Install RoundBox Check out the rest of the documentation, and ask questions if you run into trouble. What are RoundBox's prerequisites? RoundBox requires Python . See the table in the next question for the versions of Python that work with each version of RoundBox. Other Python libraries may be required for some use cases, but you'll receive an error about them as they're needed. What Python version can I use with RoundBox? RoundBox version Python versions 1.0 >=3.10 For each version of Python, only the latest micro release (A.B.C) is officially supported. You can find the latest micro version for each series on the Python download page . What Python version should I use with RoundBox? Since newer versions of Python are often faster, have more features, and are better supported, the latest version of Python 3 is recommended. You don't lose anything in RoundBox by using an older release, but you don't take advantage of the improvements and optimizations in newer Python releases. Third-party applications for use with RoundBox are free to set their own version requirements. Should I use the stable version or development version? Generally, if you're using code in production, you should be using a stable release. The RoundBox project publishes a full stable release every nine months or so, with bugfix updates in between. These stable releases contain the API that is covered by our backwards compatibility guarantees; if you write code against stable releases, you shouldn't have any problems upgrading when the next official version is released.","title":"Install"},{"location":"faq/install/#how-do-i-get-started","text":"Download the code Install RoundBox Check out the rest of the documentation, and ask questions if you run into trouble.","title":"How do I get started?"},{"location":"faq/install/#what-are-roundboxs-prerequisites","text":"RoundBox requires Python . See the table in the next question for the versions of Python that work with each version of RoundBox. Other Python libraries may be required for some use cases, but you'll receive an error about them as they're needed.","title":"What are RoundBox's prerequisites?"},{"location":"faq/install/#what-python-version-can-i-use-with-roundbox","text":"RoundBox version Python versions 1.0 >=3.10 For each version of Python, only the latest micro release (A.B.C) is officially supported. You can find the latest micro version for each series on the Python download page .","title":"What Python version can I use with RoundBox?"},{"location":"faq/install/#what-python-version-should-i-use-with-roundbox","text":"Since newer versions of Python are often faster, have more features, and are better supported, the latest version of Python 3 is recommended. You don't lose anything in RoundBox by using an older release, but you don't take advantage of the improvements and optimizations in newer Python releases. Third-party applications for use with RoundBox are free to set their own version requirements.","title":"What Python version should I use with RoundBox?"},{"location":"faq/install/#should-i-use-the-stable-version-or-development-version","text":"Generally, if you're using code in production, you should be using a stable release. The RoundBox project publishes a full stable release every nine months or so, with bugfix updates in between. These stable releases contain the API that is covered by our backwards compatibility guarantees; if you write code against stable releases, you shouldn't have any problems upgrading when the next official version is released.","title":"Should I use the stable version or development version?"},{"location":"reference/SUMMARY/","text":"__init__.py __main__.py apps __init__.py config.py registry.py conf __init__.py app_settings.py global_settings.py project_settings.py const.py core __init__.py cache __init__.py backends __init__.py base.py dummy.py filebased.py locmem.py checks __init__.py dependency.py files.py messages.py registry.py cliparser __init__.py base.py color.py commands __init__.py check.py clean_pyc.py compile_pyc.py create_jobs.py notes.py pipchecker.py print_settings.py runjob.py runjobs.py runserver.py jobs.py signals.py utils.py exceptions.py files __init__.py base.py locks.py move.py utils.py hass __init__.py components __init__.py sensor __init__.py helpers __init__.py mail __init__.py backends __init__.py base.py smtp.py utils.py schedule.py signals.py dispatch __init__.py dispatcher.py utils __init__.py autoreload.py backports __init__.py strenum __init__.py enum.py connection.py crypto.py decorators.py dt.py encoding.py functional.py hashable.py inspect.py itercompat.py log __init__.py color.py filters.py formatter.py log.py themes.py module_loading.py regex_helper.py termcolors.py threads.py throttle.py utils.py version.py version.py","title":"SUMMARY"},{"location":"reference/__init__/","text":"::: init","title":"  init  "},{"location":"reference/__main__/","text":"::: main","title":"  main  "},{"location":"reference/const/","text":"::: const","title":"Const"},{"location":"reference/version/","text":"::: version","title":"Version"},{"location":"reference/apps/__init__/","text":"::: apps. init","title":"  init  "},{"location":"reference/apps/config/","text":"::: apps.config","title":"Config"},{"location":"reference/apps/registry/","text":"::: apps.registry","title":"Registry"},{"location":"reference/conf/__init__/","text":"::: conf. init","title":"  init  "},{"location":"reference/conf/app_settings/","text":"::: conf.app_settings","title":"App settings"},{"location":"reference/conf/global_settings/","text":"::: conf.global_settings","title":"Global settings"},{"location":"reference/conf/project_settings/","text":"::: conf.project_settings","title":"Project settings"},{"location":"reference/core/__init__/","text":"::: core. init","title":"  init  "},{"location":"reference/core/exceptions/","text":"::: core.exceptions","title":"Exceptions"},{"location":"reference/core/schedule/","text":"::: core.schedule","title":"Schedule"},{"location":"reference/core/signals/","text":"::: core.signals","title":"Signals"},{"location":"reference/core/cache/__init__/","text":"::: core.cache. init","title":"  init  "},{"location":"reference/core/cache/backends/__init__/","text":"::: core.cache.backends. init","title":"  init  "},{"location":"reference/core/cache/backends/base/","text":"::: core.cache.backends.base","title":"Base"},{"location":"reference/core/cache/backends/dummy/","text":"::: core.cache.backends.dummy","title":"Dummy"},{"location":"reference/core/cache/backends/filebased/","text":"::: core.cache.backends.filebased","title":"Filebased"},{"location":"reference/core/cache/backends/locmem/","text":"::: core.cache.backends.locmem","title":"Locmem"},{"location":"reference/core/checks/__init__/","text":"::: core.checks. init","title":"  init  "},{"location":"reference/core/checks/dependency/","text":"::: core.checks.dependency","title":"Dependency"},{"location":"reference/core/checks/files/","text":"::: core.checks.files","title":"Files"},{"location":"reference/core/checks/messages/","text":"::: core.checks.messages","title":"Messages"},{"location":"reference/core/checks/registry/","text":"::: core.checks.registry","title":"Registry"},{"location":"reference/core/cliparser/__init__/","text":"::: core.cliparser. init","title":"  init  "},{"location":"reference/core/cliparser/base/","text":"::: core.cliparser.base","title":"Base"},{"location":"reference/core/cliparser/color/","text":"::: core.cliparser.color","title":"Color"},{"location":"reference/core/cliparser/jobs/","text":"::: core.cliparser.jobs","title":"Jobs"},{"location":"reference/core/cliparser/signals/","text":"::: core.cliparser.signals","title":"Signals"},{"location":"reference/core/cliparser/utils/","text":"::: core.cliparser.utils","title":"Utils"},{"location":"reference/core/cliparser/commands/__init__/","text":"::: core.cliparser.commands. init","title":"  init  "},{"location":"reference/core/cliparser/commands/check/","text":"::: core.cliparser.commands.check","title":"Check"},{"location":"reference/core/cliparser/commands/clean_pyc/","text":"::: core.cliparser.commands.clean_pyc","title":"Clean pyc"},{"location":"reference/core/cliparser/commands/compile_pyc/","text":"::: core.cliparser.commands.compile_pyc","title":"Compile pyc"},{"location":"reference/core/cliparser/commands/create_jobs/","text":"::: core.cliparser.commands.create_jobs","title":"Create jobs"},{"location":"reference/core/cliparser/commands/notes/","text":"::: core.cliparser.commands.notes","title":"Notes"},{"location":"reference/core/cliparser/commands/pipchecker/","text":"::: core.cliparser.commands.pipchecker","title":"Pipchecker"},{"location":"reference/core/cliparser/commands/print_settings/","text":"::: core.cliparser.commands.print_settings","title":"Print settings"},{"location":"reference/core/cliparser/commands/runjob/","text":"::: core.cliparser.commands.runjob","title":"Runjob"},{"location":"reference/core/cliparser/commands/runjobs/","text":"::: core.cliparser.commands.runjobs","title":"Runjobs"},{"location":"reference/core/cliparser/commands/runserver/","text":"::: core.cliparser.commands.runserver","title":"Runserver"},{"location":"reference/core/files/__init__/","text":"::: core.files. init","title":"  init  "},{"location":"reference/core/files/base/","text":"::: core.files.base","title":"Base"},{"location":"reference/core/files/locks/","text":"::: core.files.locks","title":"Locks"},{"location":"reference/core/files/move/","text":"::: core.files.move","title":"Move"},{"location":"reference/core/files/utils/","text":"::: core.files.utils","title":"Utils"},{"location":"reference/core/hass/__init__/","text":"::: core.hass. init","title":"  init  "},{"location":"reference/core/hass/components/__init__/","text":"::: core.hass.components. init","title":"  init  "},{"location":"reference/core/hass/components/sensor/__init__/","text":"::: core.hass.components.sensor. init","title":"  init  "},{"location":"reference/core/hass/helpers/__init__/","text":"::: core.hass.helpers. init","title":"  init  "},{"location":"reference/core/mail/__init__/","text":"::: core.mail. init","title":"  init  "},{"location":"reference/core/mail/utils/","text":"::: core.mail.utils","title":"Utils"},{"location":"reference/core/mail/backends/__init__/","text":"::: core.mail.backends. init","title":"  init  "},{"location":"reference/core/mail/backends/base/","text":"::: core.mail.backends.base","title":"Base"},{"location":"reference/core/mail/backends/smtp/","text":"::: core.mail.backends.smtp","title":"Smtp"},{"location":"reference/dispatch/__init__/","text":"::: dispatch. init","title":"  init  "},{"location":"reference/dispatch/dispatcher/","text":"::: dispatch.dispatcher","title":"Dispatcher"},{"location":"reference/utils/__init__/","text":"::: utils. init","title":"  init  "},{"location":"reference/utils/autoreload/","text":"::: utils.autoreload","title":"Autoreload"},{"location":"reference/utils/connection/","text":"::: utils.connection","title":"Connection"},{"location":"reference/utils/crypto/","text":"::: utils.crypto","title":"Crypto"},{"location":"reference/utils/decorators/","text":"::: utils.decorators","title":"Decorators"},{"location":"reference/utils/dt/","text":"::: utils.dt","title":"Dt"},{"location":"reference/utils/encoding/","text":"::: utils.encoding","title":"Encoding"},{"location":"reference/utils/functional/","text":"::: utils.functional","title":"Functional"},{"location":"reference/utils/hashable/","text":"::: utils.hashable","title":"Hashable"},{"location":"reference/utils/inspect/","text":"::: utils.inspect","title":"Inspect"},{"location":"reference/utils/itercompat/","text":"::: utils.itercompat","title":"Itercompat"},{"location":"reference/utils/module_loading/","text":"::: utils.module_loading","title":"Module loading"},{"location":"reference/utils/regex_helper/","text":"::: utils.regex_helper","title":"Regex helper"},{"location":"reference/utils/termcolors/","text":"::: utils.termcolors","title":"Termcolors"},{"location":"reference/utils/threads/","text":"::: utils.threads","title":"Threads"},{"location":"reference/utils/throttle/","text":"::: utils.throttle","title":"Throttle"},{"location":"reference/utils/utils/","text":"::: utils.utils","title":"Utils"},{"location":"reference/utils/version/","text":"::: utils.version","title":"Version"},{"location":"reference/utils/backports/__init__/","text":"::: utils.backports. init","title":"  init  "},{"location":"reference/utils/backports/strenum/__init__/","text":"::: utils.backports.strenum. init","title":"  init  "},{"location":"reference/utils/backports/strenum/enum/","text":"::: utils.backports.strenum.enum","title":"Enum"},{"location":"reference/utils/log/__init__/","text":"::: utils.log. init","title":"  init  "},{"location":"reference/utils/log/color/","text":"::: utils.log.color","title":"Color"},{"location":"reference/utils/log/filters/","text":"::: utils.log.filters","title":"Filters"},{"location":"reference/utils/log/formatter/","text":"::: utils.log.formatter","title":"Formatter"},{"location":"reference/utils/log/log/","text":"::: utils.log.log","title":"Log"},{"location":"reference/utils/log/themes/","text":"::: utils.log.themes","title":"Themes"},{"location":"releases/","text":"Release notes Release notes for the official RoundBox releases. Each release note will tell you what's new in each version, and will also describe any backwards-incompatible changes made in that version. Releases: {nav}","title":"Index"},{"location":"releases/#release-notes","text":"Release notes for the official RoundBox releases. Each release note will tell you what's new in each version, and will also describe any backwards-incompatible changes made in that version. Releases: {nav}","title":"Release notes"},{"location":"releases/0.9/","text":"RoundBox version 0.9 release notes Welcome to RoundBox version 0.9 release This version is the first version released to the public officially This version implements basic features and functionally and some skeletron functions for future development. Python compatibility RoundBox version 0.9 supports 3.10 or higher. We highly recommend and only officially support the latest release of each series. What's new in RoundBox 0.9 added basic tests for settings implements some functions from Home Assistant , possible in the future to remove the implementation create the documentation and write first pages from the docs pages added extras bash completion inspired by the Django implementation added the first version of settings files for each application. More info in the documentation implemented the schedule support using linux crontab and RoundBox manager.py commands added CI/CD integration for GitHub Actions , in the future more flexibility will be tested and added Makefile contains more commands for deploy and testing and also for lint the code.","title":0.9},{"location":"releases/0.9/#roundbox-version-09-release-notes","text":"Welcome to RoundBox version 0.9 release This version is the first version released to the public officially This version implements basic features and functionally and some skeletron functions for future development.","title":"RoundBox version 0.9 release notes"},{"location":"releases/0.9/#python-compatibility","text":"RoundBox version 0.9 supports 3.10 or higher. We highly recommend and only officially support the latest release of each series.","title":"Python compatibility"},{"location":"releases/0.9/#whats-new-in-roundbox-09","text":"added basic tests for settings implements some functions from Home Assistant , possible in the future to remove the implementation create the documentation and write first pages from the docs pages added extras bash completion inspired by the Django implementation added the first version of settings files for each application. More info in the documentation implemented the schedule support using linux crontab and RoundBox manager.py commands added CI/CD integration for GitHub Actions , in the future more flexibility will be tested and added Makefile contains more commands for deploy and testing and also for lint the code.","title":"What's new in RoundBox 0.9"},{"location":"releases/1.0/","text":"RoundBox version 1.0 release notes Welcome to RoundBox version 1.0 release This version is the first version released to the public With this version basic feature and improvements are done, more features and functionalities yet to come Python compatibility RoundBox version 1.0 supports 3.10 or higher. We highly recommend and only officially support the latest release of each series. What's new in RoundBox 1.0 mkdocs.yml file has new updated on the configuration and include more markdown extensions remove the leading dot after version when the patch version is missing implement the setting.py file inside each application, more in documentation to come improve documentation for schedules from cli commands added mkdocs-pagenav-generator for release page on docs using added the todos make command, to search for todos sections of the code","title":1.0},{"location":"releases/1.0/#roundbox-version-10-release-notes","text":"Welcome to RoundBox version 1.0 release This version is the first version released to the public With this version basic feature and improvements are done, more features and functionalities yet to come","title":"RoundBox version 1.0 release notes"},{"location":"releases/1.0/#python-compatibility","text":"RoundBox version 1.0 supports 3.10 or higher. We highly recommend and only officially support the latest release of each series.","title":"Python compatibility"},{"location":"releases/1.0/#whats-new-in-roundbox-10","text":"mkdocs.yml file has new updated on the configuration and include more markdown extensions remove the leading dot after version when the patch version is missing implement the setting.py file inside each application, more in documentation to come improve documentation for schedules from cli commands added mkdocs-pagenav-generator for release page on docs using added the todos make command, to search for todos sections of the code","title":"What's new in RoundBox 1.0"},{"location":"user-guide/topics/","text":"Using RoundBox Presenting all the important features of RoundBox framework Install Settings schedule Signals Logging","title":"Using RoundBox"},{"location":"user-guide/topics/#using-roundbox","text":"Presenting all the important features of RoundBox framework Install Settings schedule Signals Logging","title":"Using RoundBox"},{"location":"user-guide/topics/install/","text":"How to install RoundBox This document will get you up and running with RoundBox. Install Python RoundBox is a Python framework. See Python docs for details. Get the latest version of Python at https://www.python.org/downloads/ or with your operating system's package manager. Installing an official release with pip This is the recommended way to install RoundBox. Install pip . The easiest is to use the standalone pip installer . If your distribution already has pip installed, you might need to update it if it's outdated. If it's outdated, you'll know because installation won't work. Take a look at venv . This tool provides isolated Python environments, which are more practical than installing packages system-wide. It also allows installing packages without administrator privileges. After you've created and activated a virtual environment, enter the command: $ python -m pip install roundbox Installing the development version If you'd like to be able to update your RoundBox code occasionally with the latest bug fixes and improvements, follow these instructions: Make sure that you have Git installed and that you can run its commands from a shell. (Enter git help at a shell prompt to test this.) Check out RoundBox's main development branch like so: $ git clone https://github.com/soulraven/roundbox.git This will create a directory roundbox in your current directory. Make sure that the Python interpreter can load RoundBox's code. The most convenient way to do this is to use a virtual environment and pip . After setting up and activating the virtual environment, run the following command: $ python -m pip install -e roundbox/ This will make RoundBox's code importable, and will also make the roundbox-admin utility command available. In other words, you're all set! When you want to update your copy of the RoundBox source code, run the command git pull from within the roundbox directory. When you do this, Git will download any changes.","title":"Install"},{"location":"user-guide/topics/install/#how-to-install-roundbox","text":"This document will get you up and running with RoundBox.","title":"How to install RoundBox"},{"location":"user-guide/topics/install/#install-python","text":"RoundBox is a Python framework. See Python docs for details. Get the latest version of Python at https://www.python.org/downloads/ or with your operating system's package manager.","title":"Install Python"},{"location":"user-guide/topics/install/#installing-an-official-release-with-pip","text":"This is the recommended way to install RoundBox. Install pip . The easiest is to use the standalone pip installer . If your distribution already has pip installed, you might need to update it if it's outdated. If it's outdated, you'll know because installation won't work. Take a look at venv . This tool provides isolated Python environments, which are more practical than installing packages system-wide. It also allows installing packages without administrator privileges. After you've created and activated a virtual environment, enter the command: $ python -m pip install roundbox","title":"Installing an official release with pip"},{"location":"user-guide/topics/install/#installing-the-development-version","text":"If you'd like to be able to update your RoundBox code occasionally with the latest bug fixes and improvements, follow these instructions: Make sure that you have Git installed and that you can run its commands from a shell. (Enter git help at a shell prompt to test this.) Check out RoundBox's main development branch like so: $ git clone https://github.com/soulraven/roundbox.git This will create a directory roundbox in your current directory. Make sure that the Python interpreter can load RoundBox's code. The most convenient way to do this is to use a virtual environment and pip . After setting up and activating the virtual environment, run the following command: $ python -m pip install -e roundbox/ This will make RoundBox's code importable, and will also make the roundbox-admin utility command available. In other words, you're all set! When you want to update your copy of the RoundBox source code, run the command git pull from within the roundbox directory. When you do this, Git will download any changes.","title":"Installing the development version"},{"location":"user-guide/topics/jobs_scheduling/","text":"Jobs Scheduling Documentation on creating/using jobs in RoundBox Creating jobs works much like management commands work in RoundBox. Setup Run: $ python manage.py create_jobs <roundbox_application> to make a jobs directory inside an application. The jobs directory will have the following tree: jobs \u251c\u2500\u2500 daily \u2502 \u2514\u2500\u2500 __init__.py \u251c\u2500\u2500 hourly \u2502 \u2514\u2500\u2500 __init__.py \u251c\u2500\u2500 monthly \u2502 \u2514\u2500\u2500 __init__.py \u251c\u2500\u2500 weekly \u2502 \u2514\u2500\u2500 __init__.py \u251c\u2500\u2500 yearly \u2502 \u2514\u2500\u2500 __init__.py \u251c\u2500\u2500 __init__.py \u2514\u2500\u2500 sample.py Create a job A job is a Python script with a mandatory BaseJob class which extends from MinutelyJob , QuarterHourlyJob , HourlyJob , DailyJob , WeeklyJob , MonthlyJob or Yearly . It has one method that must be implemented called execute , which is called when the job is run. The directories hourly , daily , monthly , weekly and yearly are used only to for organisation purpose. Note If you want to use QuarterHourlyJob or Minutely job, create python package with name quarter_hourly or minutely respectively (similar to hourly or daily package). To create your first job you can start copying sample.py . Remember to replace BaseJob with MinutelyJob , QuarterHourlyJob , HourlyJob , DailyJob , WeeklyJob , MonthlyJob or Yearly . Note that each job should be in a new python script (within respective directory) and the class implementing the cron should be named Job . Also, __init__.py file is not used for identifying jobs. Run a job The following commands are related to jobs: create_jobs , create the directory structure for jobs runjob , run a single job runjobs , run all hourly/daily/weekly/monthly jobs Use \"runjob(s) -l\" to list all jobs recognized. Jobs do not run automatically! You must either run a job manually specifying the exact time on which the command is to be run, or use crontab: @hourly /path/to/my/project/manage.py runjobs hourly @daily /path/to/my/project/manage.py runjobs daily @weekly /path/to/my/project/manage.py runjobs weekly @monthly /path/to/my/project/manage.py runjobs monthly","title":"Schedule"},{"location":"user-guide/topics/jobs_scheduling/#jobs-scheduling","text":"Documentation on creating/using jobs in RoundBox Creating jobs works much like management commands work in RoundBox.","title":"Jobs Scheduling"},{"location":"user-guide/topics/jobs_scheduling/#setup","text":"Run: $ python manage.py create_jobs <roundbox_application> to make a jobs directory inside an application. The jobs directory will have the following tree: jobs \u251c\u2500\u2500 daily \u2502 \u2514\u2500\u2500 __init__.py \u251c\u2500\u2500 hourly \u2502 \u2514\u2500\u2500 __init__.py \u251c\u2500\u2500 monthly \u2502 \u2514\u2500\u2500 __init__.py \u251c\u2500\u2500 weekly \u2502 \u2514\u2500\u2500 __init__.py \u251c\u2500\u2500 yearly \u2502 \u2514\u2500\u2500 __init__.py \u251c\u2500\u2500 __init__.py \u2514\u2500\u2500 sample.py","title":"Setup"},{"location":"user-guide/topics/jobs_scheduling/#create-a-job","text":"A job is a Python script with a mandatory BaseJob class which extends from MinutelyJob , QuarterHourlyJob , HourlyJob , DailyJob , WeeklyJob , MonthlyJob or Yearly . It has one method that must be implemented called execute , which is called when the job is run. The directories hourly , daily , monthly , weekly and yearly are used only to for organisation purpose. Note If you want to use QuarterHourlyJob or Minutely job, create python package with name quarter_hourly or minutely respectively (similar to hourly or daily package). To create your first job you can start copying sample.py . Remember to replace BaseJob with MinutelyJob , QuarterHourlyJob , HourlyJob , DailyJob , WeeklyJob , MonthlyJob or Yearly . Note that each job should be in a new python script (within respective directory) and the class implementing the cron should be named Job . Also, __init__.py file is not used for identifying jobs.","title":"Create a job"},{"location":"user-guide/topics/jobs_scheduling/#run-a-job","text":"The following commands are related to jobs: create_jobs , create the directory structure for jobs runjob , run a single job runjobs , run all hourly/daily/weekly/monthly jobs Use \"runjob(s) -l\" to list all jobs recognized. Jobs do not run automatically! You must either run a job manually specifying the exact time on which the command is to be run, or use crontab: @hourly /path/to/my/project/manage.py runjobs hourly @daily /path/to/my/project/manage.py runjobs daily @weekly /path/to/my/project/manage.py runjobs weekly @monthly /path/to/my/project/manage.py runjobs monthly","title":"Run a job"},{"location":"user-guide/topics/logging/","text":"","title":"Logging"},{"location":"user-guide/topics/settings/","tags":["settings","python","module","search"],"text":"RoundBox settings A RoundBox settings file contains all the configuration of your RoundBox installation. This document explains how settings work and which settings are available. The basics A settings file is just a Python module with module-level variables. Note If you set DEBUG to False , the logging system will not display the debug messages Because a settings file is a Python module, the following apply: It doesn't allow for Python syntax errors. It can assign settings dynamically using normal Python syntax. For example: MY_SETTING = [ str ( i ) for i in range ( 30 )] It can import values from other settings files Designating the settings When you use RoundBox, you have to tell it which settings you're using. Do this by using an environment variable, ROUNDBOX_SETTINGS_MODULE . The value of ROUNDBOX_SETTINGS_MODULE should be in Python path syntax, e.g. myproject.settings . Note that the settings module should be on the Python import search path . Default settings A RoundBox settings file doesn't have to define any settings if it doesn't need to. Each setting has a sensible default value. These defaults live in the module roundbox/conf/global_settings.py . Here's the algorithm RoundBox uses in compiling settings: Load settings from global_settings.py . Load settings from the specified settings file, overriding the global settings as necessary. Note that a settings file should not import from global_settings , because that's redundant. Seeing which settings you've changed The command python manage.py diffsettings displays differences between the current settings file and RoundBox's default settings. Using settings in Python code In your RoundBox apps, use settings by importing the object roundbox.project_conf.settings . Example:: from RoundBox.conf.project_settings import settings if settings . DEBUG : # Do something Note that RoundBox.conf.project_settings isn't a module -- it's an object. So importing individual settings is not possible: from RoundBox.conf.project_settings import DEBUG # This won't work. Also note that your code should not import from either global_settings or your own settings file. RoundBox.conf.project_settings abstracts the concepts of default settings and site-specific settings; it presents a single interface. It also decouples the code that uses settings from the location of your settings. Altering settings at runtime You shouldn't alter settings in your applications at runtime. For example, don't do this in a view: from RoundBox.conf.project_settings import settings settings . DEBUG = True # Don't do this! The only place you should assign to settings is in a settings file. Security Because a settings file contains sensitive information, such as the database password, you should make every attempt to limit access to it. For example, change its file permissions so that only you and your web server's user can read it. This is especially important in a shared-hosting environment. Creating your own settings There's nothing stopping you from creating your own settings, for your own RoundBox apps, but follow these guidelines: Setting names must be all uppercase. Don't reinvent an already-existing setting. For settings that are sequences, RoundBox itself uses lists, but this is only a convention. Using settings without setting ROUNDBOX_SETTINGS_MODULE In some cases, you might want to bypass the ROUNDBOX_SETTINGS_MODULE environment variable. For example, if you're using the template system by itself, you likely don't want to have to set up an environment variable pointing to a settings module. RoundBox.conf.project_settings.configure(default_settings, **settings) from RoundBox.conf.project_settings import settings settings . configure ( DEBUG = True ) Pass configure() as many keyword arguments as you'd like, with each keyword argument representing a setting and its value. Each argument name should be all uppercase, with the same name as the settings described above. If a particular setting is not passed to configure() and is needed at some later point, RoundBox will use the default setting value. Configuring RoundBox in this fashion is mostly necessary -- and, indeed, recommended -- when you're using a piece of the framework inside a larger application. Consequently, when configured via settings.configure() , RoundBox will not make any modifications to the process environment variables (see the documentation of TIME_ZONE for why this would normally occur). It's assumed that you're already in full control of your environment in these cases. Custom default settings If you'd like default values to come from somewhere other than RoundBox.conf.global_settings , you can pass in a module or class that provides the default settings as the default_settings argument (or as the first positional argument) in the call to configure() . In this example, default settings are taken from myapp_defaults , and the DEBUG setting is set to True , regardless of its value in myapp_defaults : from RoundBox.conf.project_settings import settings from myapp import myapp_defaults settings . configure ( default_settings = myapp_defaults , DEBUG = True ) The following example, which uses myapp_defaults as a positional argument, is equivalent: settings . configure ( myapp_defaults , DEBUG = True ) Normally, you will not need to override the defaults in this fashion. The RoundBox defaults are sufficiently tame that you can safely use them. Be aware that if you do pass in a new default module, it entirely replaces the RoundBox defaults, so you must specify a value for every possible setting that might be used in that code you are importing. Check in RoundBox.conf.global_settings for the full list. Either configure() or ROUNDBOX_SETTINGS_MODULE is required If you're not setting the ROUNDBOX_SETTINGS_MODULE environment variable, you must call configure() at some point before using any code that reads settings. If you don't set ROUNDBOX_SETTINGS_MODULE and don't call configure() , RoundBox will raise an ImportError exception the first time a setting is accessed. If you set ROUNDBOX_SETTINGS_MODULE , access settings values somehow, then call configure() , RoundBox will raise a RuntimeError indicating that settings have already been configured. There is a property for this purpose: RoundBox.conf.project_settings.configured For example:: from RoundBox.conf import settings if not settings . configured : settings . configure ( myapp_defaults , DEBUG = True ) Also, it's an error to call configure() more than once, or to call configure() after any setting has been accessed. It boils down to this: Use exactly one of either configure() or ROUNDBOX_SETTINGS_MODULE . Not both, and not neither. Calling RoundBox.setup() is required for \"standalone\" RoundBox usage If you're using components of Django \"standalone\" -- for example, writing a Python script which loads some Django templates and renders them, or uses the ORM to fetch some data -- there's one more step you'll need in addition to configuring settings. After you've either set ROUNDBOX_SETTINGS_MODULE or called configure() , you'll need to call django.setup() to load your settings and populate Django's application registry. For example: import RoundBox from RoundBox.conf import project_settings from myapp import myapp_defaults project_settings . configure ( default_settings = myapp_defaults , DEBUG = True ) RoundBox . setup () # Now this script or any imported module can use any part of Django it needs. from myapp import models Note that calling RoundBox.setup() is only necessary if your code is truly standalone. When invoked by your web server, or through roundbox-admin , RoundBox will handle this for you. RoundBox.setup() may only be called once. Therefore, avoid putting reusable application logic in standalone scripts so that you have to import from the script elsewhere in your application. If you can't avoid that, put the call to RoundBox.setup() inside an if block:: if __name__ == '__main__' : import RoundBox RoundBox . setup ()","title":"Settings"},{"location":"user-guide/topics/settings/#roundbox-settings","text":"A RoundBox settings file contains all the configuration of your RoundBox installation. This document explains how settings work and which settings are available.","title":"RoundBox settings"},{"location":"user-guide/topics/settings/#the-basics","text":"A settings file is just a Python module with module-level variables. Note If you set DEBUG to False , the logging system will not display the debug messages Because a settings file is a Python module, the following apply: It doesn't allow for Python syntax errors. It can assign settings dynamically using normal Python syntax. For example: MY_SETTING = [ str ( i ) for i in range ( 30 )] It can import values from other settings files","title":"The basics"},{"location":"user-guide/topics/settings/#designating-the-settings","text":"When you use RoundBox, you have to tell it which settings you're using. Do this by using an environment variable, ROUNDBOX_SETTINGS_MODULE . The value of ROUNDBOX_SETTINGS_MODULE should be in Python path syntax, e.g. myproject.settings . Note that the settings module should be on the Python import search path .","title":"Designating the settings"},{"location":"user-guide/topics/settings/#default-settings","text":"A RoundBox settings file doesn't have to define any settings if it doesn't need to. Each setting has a sensible default value. These defaults live in the module roundbox/conf/global_settings.py . Here's the algorithm RoundBox uses in compiling settings: Load settings from global_settings.py . Load settings from the specified settings file, overriding the global settings as necessary. Note that a settings file should not import from global_settings , because that's redundant.","title":"Default settings"},{"location":"user-guide/topics/settings/#seeing-which-settings-youve-changed","text":"The command python manage.py diffsettings displays differences between the current settings file and RoundBox's default settings.","title":"Seeing which settings you've changed"},{"location":"user-guide/topics/settings/#using-settings-in-python-code","text":"In your RoundBox apps, use settings by importing the object roundbox.project_conf.settings . Example:: from RoundBox.conf.project_settings import settings if settings . DEBUG : # Do something Note that RoundBox.conf.project_settings isn't a module -- it's an object. So importing individual settings is not possible: from RoundBox.conf.project_settings import DEBUG # This won't work. Also note that your code should not import from either global_settings or your own settings file. RoundBox.conf.project_settings abstracts the concepts of default settings and site-specific settings; it presents a single interface. It also decouples the code that uses settings from the location of your settings.","title":"Using settings in Python code"},{"location":"user-guide/topics/settings/#altering-settings-at-runtime","text":"You shouldn't alter settings in your applications at runtime. For example, don't do this in a view: from RoundBox.conf.project_settings import settings settings . DEBUG = True # Don't do this! The only place you should assign to settings is in a settings file.","title":"Altering settings at runtime"},{"location":"user-guide/topics/settings/#security","text":"Because a settings file contains sensitive information, such as the database password, you should make every attempt to limit access to it. For example, change its file permissions so that only you and your web server's user can read it. This is especially important in a shared-hosting environment.","title":"Security"},{"location":"user-guide/topics/settings/#creating-your-own-settings","text":"There's nothing stopping you from creating your own settings, for your own RoundBox apps, but follow these guidelines: Setting names must be all uppercase. Don't reinvent an already-existing setting. For settings that are sequences, RoundBox itself uses lists, but this is only a convention.","title":"Creating your own settings"},{"location":"user-guide/topics/settings/#using-settings-without-setting-roundbox_settings_module","text":"In some cases, you might want to bypass the ROUNDBOX_SETTINGS_MODULE environment variable. For example, if you're using the template system by itself, you likely don't want to have to set up an environment variable pointing to a settings module. RoundBox.conf.project_settings.configure(default_settings, **settings) from RoundBox.conf.project_settings import settings settings . configure ( DEBUG = True ) Pass configure() as many keyword arguments as you'd like, with each keyword argument representing a setting and its value. Each argument name should be all uppercase, with the same name as the settings described above. If a particular setting is not passed to configure() and is needed at some later point, RoundBox will use the default setting value. Configuring RoundBox in this fashion is mostly necessary -- and, indeed, recommended -- when you're using a piece of the framework inside a larger application. Consequently, when configured via settings.configure() , RoundBox will not make any modifications to the process environment variables (see the documentation of TIME_ZONE for why this would normally occur). It's assumed that you're already in full control of your environment in these cases.","title":"Using settings without setting ROUNDBOX_SETTINGS_MODULE"},{"location":"user-guide/topics/settings/#custom-default-settings","text":"If you'd like default values to come from somewhere other than RoundBox.conf.global_settings , you can pass in a module or class that provides the default settings as the default_settings argument (or as the first positional argument) in the call to configure() . In this example, default settings are taken from myapp_defaults , and the DEBUG setting is set to True , regardless of its value in myapp_defaults : from RoundBox.conf.project_settings import settings from myapp import myapp_defaults settings . configure ( default_settings = myapp_defaults , DEBUG = True ) The following example, which uses myapp_defaults as a positional argument, is equivalent: settings . configure ( myapp_defaults , DEBUG = True ) Normally, you will not need to override the defaults in this fashion. The RoundBox defaults are sufficiently tame that you can safely use them. Be aware that if you do pass in a new default module, it entirely replaces the RoundBox defaults, so you must specify a value for every possible setting that might be used in that code you are importing. Check in RoundBox.conf.global_settings for the full list.","title":"Custom default settings"},{"location":"user-guide/topics/settings/#either-configure-or-roundbox_settings_module-is-required","text":"If you're not setting the ROUNDBOX_SETTINGS_MODULE environment variable, you must call configure() at some point before using any code that reads settings. If you don't set ROUNDBOX_SETTINGS_MODULE and don't call configure() , RoundBox will raise an ImportError exception the first time a setting is accessed. If you set ROUNDBOX_SETTINGS_MODULE , access settings values somehow, then call configure() , RoundBox will raise a RuntimeError indicating that settings have already been configured. There is a property for this purpose: RoundBox.conf.project_settings.configured For example:: from RoundBox.conf import settings if not settings . configured : settings . configure ( myapp_defaults , DEBUG = True ) Also, it's an error to call configure() more than once, or to call configure() after any setting has been accessed. It boils down to this: Use exactly one of either configure() or ROUNDBOX_SETTINGS_MODULE . Not both, and not neither.","title":"Either configure() or ROUNDBOX_SETTINGS_MODULE is required"},{"location":"user-guide/topics/settings/#calling-roundboxsetup-is-required-for-standalone-roundbox-usage","text":"If you're using components of Django \"standalone\" -- for example, writing a Python script which loads some Django templates and renders them, or uses the ORM to fetch some data -- there's one more step you'll need in addition to configuring settings. After you've either set ROUNDBOX_SETTINGS_MODULE or called configure() , you'll need to call django.setup() to load your settings and populate Django's application registry. For example: import RoundBox from RoundBox.conf import project_settings from myapp import myapp_defaults project_settings . configure ( default_settings = myapp_defaults , DEBUG = True ) RoundBox . setup () # Now this script or any imported module can use any part of Django it needs. from myapp import models Note that calling RoundBox.setup() is only necessary if your code is truly standalone. When invoked by your web server, or through roundbox-admin , RoundBox will handle this for you. RoundBox.setup() may only be called once. Therefore, avoid putting reusable application logic in standalone scripts so that you have to import from the script elsewhere in your application. If you can't avoid that, put the call to RoundBox.setup() inside an if block:: if __name__ == '__main__' : import RoundBox RoundBox . setup ()","title":"Calling RoundBox.setup() is required for \"standalone\" RoundBox usage"},{"location":"user-guide/topics/signals/","text":"Signals RoundBox includes a \"signal dispatcher\" which helps decoupled applications get notified when actions occur elsewhere in the framework. In a nutshell, signals allow certain senders to notify a set of receivers that some action has taken place. They're especially useful when many pieces of code may be interested in the same events. Listening to signals To receive a signal, register a receiver function using the Signal . connect () method. The receiver function is called when the signal is sent. All the signal's receiver functions are called one at a time, in the order they were registered. Signal.connect(receiver, sender=None, weak=True, dispatch_uid=None) receiver The callback function which will be connected to this signal. See receiver-functions for more information. sender Specifies a particular sender to receive signals from. See connecting-to-specific-signals for more information. weak RoundBox stores signal handlers as weak references by default. Thus, if your receiver is a local function, it may be garbage collected. To prevent this, pass weak=False when you call the signal's connect () method. dispatch_uid A unique identifier for a signal receiver in cases where duplicate signals may be sent. See preventing-duplicate-signals for more information. Receiver functions First, we need to define a receiver function. A receiver can be any Python function or method: def my_callback ( sender , ** kwargs ): print ( \"Request finished!\" ) Notice that the function takes a sender argument, along with wildcard keyword arguments ( **kwargs ); all signal handlers must take these arguments. We'll look at senders a bit later , but right now look at the **kwargs argument. All signals send keyword arguments, and may change those keyword arguments at any time. In the case of ~RoundBox.core.signals.request_finished , it's documented as sending no arguments, which means we might be tempted to write our signal handling as my_callback(sender) . This would be wrong -- in fact, Django will throw an error if you do so. That's because at any point arguments could get added to the signal and your receiver must be able to handle those new arguments. Connecting receiver functions There are two ways you can connect a receiver to a signal. You can take the manual connect route: from RoundBox.core.signals import request_finished request_finished . connect ( my_callback ) Alternatively, you can use a receiver decorator: Here\u2019s how you connect with the decorator: from RoundBox.core.signals import request_finished from RoundBox.dispatch import receiver @receiver ( request_finished ) def my_callback ( sender , ** kwargs ): print ( \"Request finished!\" ) Now, our my_callback function will be called each time a request finishes. Where should this code live? Strictly speaking, signal handling and registration code can live anywhere you like In practice, signal handlers are usually defined in a signals submodule of the application they relate to. Signal receivers are connected in the ~RoundBox.apps.AppConfig.ready method of your application configuration class . If you're using the receiver decorator, import the signals submodule inside ~RoundBox.apps.AppConfig.ready , this will implicitly connect signal handlers: from RoundBox.apps import AppConfig from RoundBox.core.signals import request_finished class MyAppConfig ( AppConfig ): ... def ready ( self ): # Implicitly connect a signal handlers decorated with @receiver. from . import signals # Explicitly connect a signal handler. request_finished . connect ( signals . my_callback ) Note The ~RoundBox.apps.AppConfig.ready method may be executed more than once during testing, so you may want to guard your signals from duplication , especially if you're planning to send them within tests. Connecting to signal's sent by specific senders Some signals get sent many times, but you'll only be interested in receiving a certain subset of those signals. Preventing duplicate signals In some circumstances, the code connecting receivers to signals may run multiple times. This can cause your receiver function to be registered more than once, and thus called as many times for a signal event. For example, the ~RoundBox.apps.AppConfig.ready method may be executed more than once during testing. More generally, this occurs everywhere your project imports the module where you define the signals, because signal registration runs as many times as it is imported. If this behavior is problematic, pass a unique identifier as the dispatch_uid argument to identify your receiver function. This identifier will usually be a string, although any hashable object will suffice. The end result is that your receiver function will only be bound to the signal once for each unique dispatch_uid value: from RoundBox.core.signals import request_finished request_finished . connect ( my_callback , dispatch_uid = \"my_unique_identifier\" ) Defining and sending signals Your applications can take advantage of the signal infrastructure and provide its own signals. When to use custom signals Signals are implicit function calls which make debugging harder. If the sender and receiver of your custom signal are both within your project, you're better off using an explicit function call. Defining signals Signal() All signals are RoundBox.dispatch.Signal instances. For example: import RoundBox.dispatch pizza_done = RoundBox . dispatch . Signal () This declares a pizza_done signal. Sending signals Signal.send(sender, **kwargs) Signal.send_robust(sender, **kwargs) To send a signal, call either Signal.send (all built-in signals use this) or Signal.send_robust . You must provide the sender argument (which is a class most of the time) and may provide as many other keyword arguments as you like. For example, here's how sending our pizza_done signal might look: class PizzaStore : ... def send_pizza ( self , toppings , size ): pizza_done . send ( sender = self . __class__ , toppings = toppings , size = size ) ... Both send() and send_robust() return a list of tuple pairs [(receiver, response), ... ] , representing the list of called receiver functions and their response values. send() differs from send_robust() in how exceptions raised by receiver functions are handled. send() does not catch any exceptions raised by receivers; it simply allows errors to propagate. Thus not all receivers may be notified of a signal in the face of an error. send_robust() catches all errors derived from Python's Exception class, and ensures all receivers are notified of the signal. If an error occurs, the error instance is returned in the tuple pair for the receiver that raised the error. The tracebacks are present on the __traceback__ attribute of the errors returned when calling send_robust() . Disconnecting signals Signal.disconnect(receiver=None, sender=None, dispatch_uid=None) To disconnect a receiver from a signal, call Signal.disconnect . The arguments are as described in .Signal.connect . The method returns True if a receiver was disconnected and False if not. The receiver argument indicates the registered receiver to disconnect. It may be None if dispatch_uid is used to identify the receiver.","title":"Signals"},{"location":"user-guide/topics/signals/#signals","text":"RoundBox includes a \"signal dispatcher\" which helps decoupled applications get notified when actions occur elsewhere in the framework. In a nutshell, signals allow certain senders to notify a set of receivers that some action has taken place. They're especially useful when many pieces of code may be interested in the same events.","title":"Signals"},{"location":"user-guide/topics/signals/#listening-to-signals","text":"To receive a signal, register a receiver function using the Signal . connect () method. The receiver function is called when the signal is sent. All the signal's receiver functions are called one at a time, in the order they were registered. Signal.connect(receiver, sender=None, weak=True, dispatch_uid=None) receiver The callback function which will be connected to this signal. See receiver-functions for more information. sender Specifies a particular sender to receive signals from. See connecting-to-specific-signals for more information. weak RoundBox stores signal handlers as weak references by default. Thus, if your receiver is a local function, it may be garbage collected. To prevent this, pass weak=False when you call the signal's connect () method. dispatch_uid A unique identifier for a signal receiver in cases where duplicate signals may be sent. See preventing-duplicate-signals for more information.","title":"Listening to signals"},{"location":"user-guide/topics/signals/#receiver-functions","text":"First, we need to define a receiver function. A receiver can be any Python function or method: def my_callback ( sender , ** kwargs ): print ( \"Request finished!\" ) Notice that the function takes a sender argument, along with wildcard keyword arguments ( **kwargs ); all signal handlers must take these arguments. We'll look at senders a bit later , but right now look at the **kwargs argument. All signals send keyword arguments, and may change those keyword arguments at any time. In the case of ~RoundBox.core.signals.request_finished , it's documented as sending no arguments, which means we might be tempted to write our signal handling as my_callback(sender) . This would be wrong -- in fact, Django will throw an error if you do so. That's because at any point arguments could get added to the signal and your receiver must be able to handle those new arguments.","title":"Receiver functions"},{"location":"user-guide/topics/signals/#connecting-receiver-functions","text":"There are two ways you can connect a receiver to a signal. You can take the manual connect route: from RoundBox.core.signals import request_finished request_finished . connect ( my_callback ) Alternatively, you can use a receiver decorator: Here\u2019s how you connect with the decorator: from RoundBox.core.signals import request_finished from RoundBox.dispatch import receiver @receiver ( request_finished ) def my_callback ( sender , ** kwargs ): print ( \"Request finished!\" ) Now, our my_callback function will be called each time a request finishes. Where should this code live? Strictly speaking, signal handling and registration code can live anywhere you like In practice, signal handlers are usually defined in a signals submodule of the application they relate to. Signal receivers are connected in the ~RoundBox.apps.AppConfig.ready method of your application configuration class . If you're using the receiver decorator, import the signals submodule inside ~RoundBox.apps.AppConfig.ready , this will implicitly connect signal handlers: from RoundBox.apps import AppConfig from RoundBox.core.signals import request_finished class MyAppConfig ( AppConfig ): ... def ready ( self ): # Implicitly connect a signal handlers decorated with @receiver. from . import signals # Explicitly connect a signal handler. request_finished . connect ( signals . my_callback ) Note The ~RoundBox.apps.AppConfig.ready method may be executed more than once during testing, so you may want to guard your signals from duplication , especially if you're planning to send them within tests.","title":"Connecting receiver functions"},{"location":"user-guide/topics/signals/#connecting-to-signals-sent-by-specific-senders","text":"Some signals get sent many times, but you'll only be interested in receiving a certain subset of those signals.","title":"Connecting to signal's sent by specific senders"},{"location":"user-guide/topics/signals/#preventing-duplicate-signals","text":"In some circumstances, the code connecting receivers to signals may run multiple times. This can cause your receiver function to be registered more than once, and thus called as many times for a signal event. For example, the ~RoundBox.apps.AppConfig.ready method may be executed more than once during testing. More generally, this occurs everywhere your project imports the module where you define the signals, because signal registration runs as many times as it is imported. If this behavior is problematic, pass a unique identifier as the dispatch_uid argument to identify your receiver function. This identifier will usually be a string, although any hashable object will suffice. The end result is that your receiver function will only be bound to the signal once for each unique dispatch_uid value: from RoundBox.core.signals import request_finished request_finished . connect ( my_callback , dispatch_uid = \"my_unique_identifier\" )","title":"Preventing duplicate signals"},{"location":"user-guide/topics/signals/#defining-and-sending-signals","text":"Your applications can take advantage of the signal infrastructure and provide its own signals. When to use custom signals Signals are implicit function calls which make debugging harder. If the sender and receiver of your custom signal are both within your project, you're better off using an explicit function call.","title":"Defining and sending signals"},{"location":"user-guide/topics/signals/#defining-signals","text":"Signal() All signals are RoundBox.dispatch.Signal instances. For example: import RoundBox.dispatch pizza_done = RoundBox . dispatch . Signal () This declares a pizza_done signal.","title":"Defining signals"},{"location":"user-guide/topics/signals/#sending-signals","text":"Signal.send(sender, **kwargs) Signal.send_robust(sender, **kwargs) To send a signal, call either Signal.send (all built-in signals use this) or Signal.send_robust . You must provide the sender argument (which is a class most of the time) and may provide as many other keyword arguments as you like. For example, here's how sending our pizza_done signal might look: class PizzaStore : ... def send_pizza ( self , toppings , size ): pizza_done . send ( sender = self . __class__ , toppings = toppings , size = size ) ... Both send() and send_robust() return a list of tuple pairs [(receiver, response), ... ] , representing the list of called receiver functions and their response values. send() differs from send_robust() in how exceptions raised by receiver functions are handled. send() does not catch any exceptions raised by receivers; it simply allows errors to propagate. Thus not all receivers may be notified of a signal in the face of an error. send_robust() catches all errors derived from Python's Exception class, and ensures all receivers are notified of the signal. If an error occurs, the error instance is returned in the tuple pair for the receiver that raised the error. The tracebacks are present on the __traceback__ attribute of the errors returned when calling send_robust() .","title":"Sending signals"},{"location":"user-guide/topics/signals/#disconnecting-signals","text":"Signal.disconnect(receiver=None, sender=None, dispatch_uid=None) To disconnect a receiver from a signal, call Signal.disconnect . The arguments are as described in .Signal.connect . The method returns True if a receiver was disconnected and False if not. The receiver argument indicates the registered receiver to disconnect. It may be None if dispatch_uid is used to identify the receiver.","title":"Disconnecting signals"}]}