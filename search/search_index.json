{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u26a1 RoundBox \u00b6 A small lightweight framework for IoT applications \ud83c\udf88 Special thanks \u00b6 To build this framework I have used code inspired by the Django project and also from Home Assistant project. Both projects have a strong code base and lightweight and port on different projects. \ud83d\udd87 Library used \u00b6 \ud83d\udcda Documentation \u00b6 \ud83d\udd27 Installation \u00b6 \u27bf Variables \u00b6 set the ROUNDBOX_COLORS environment variable to specify the palette you want to use. For example, to specify the light palette under a Unix or OS/X BASH shell, you would run the following at a command prompt: export ROUNDBOX_COLORS=\"light\" \ud83c\udf0d Contributions \u00b6 Contributions of all forms are welcome :) \ud83d\udcdd License \u00b6 This repository is licensed under the GNU General Public License, version 3 (GPLv3). \ud83d\udc40 Author \u00b6 Zaharia Constantin View my GitHub profile \ud83d\udca1","title":"Home"},{"location":"#roundbox","text":"A small lightweight framework for IoT applications","title":"\u26a1 RoundBox"},{"location":"#special-thanks","text":"To build this framework I have used code inspired by the Django project and also from Home Assistant project. Both projects have a strong code base and lightweight and port on different projects.","title":"\ud83c\udf88 Special thanks"},{"location":"#library-used","text":"","title":"\ud83d\udd87 Library used"},{"location":"#documentation","text":"","title":"\ud83d\udcda Documentation"},{"location":"#installation","text":"","title":"\ud83d\udd27 Installation"},{"location":"#variables","text":"set the ROUNDBOX_COLORS environment variable to specify the palette you want to use. For example, to specify the light palette under a Unix or OS/X BASH shell, you would run the following at a command prompt: export ROUNDBOX_COLORS=\"light\"","title":"\u27bf Variables"},{"location":"#contributions","text":"Contributions of all forms are welcome :)","title":"\ud83c\udf0d Contributions"},{"location":"#license","text":"This repository is licensed under the GNU General Public License, version 3 (GPLv3).","title":"\ud83d\udcdd License"},{"location":"#author","text":"Zaharia Constantin View my GitHub profile \ud83d\udca1","title":"\ud83d\udc40 Author"},{"location":"jobs/jobs_scheduling/","text":"Jobs Scheduling \u00b6 :synopsis: Documentation on creating/using jobs in RoundBox Creating jobs works much like management commands work in Django. Setup \u00b6 Run :: $ python manage.py create_jobs <roundbox_application> to make a jobs directory inside of an application. The jobs directory will have the following tree:: jobs \u251c\u2500\u2500 daily \u2502 \u2514\u2500\u2500 __init__.py \u251c\u2500\u2500 hourly \u2502 \u2514\u2500\u2500 __init__.py \u251c\u2500\u2500 monthly \u2502 \u2514\u2500\u2500 __init__.py \u251c\u2500\u2500 weekly \u2502 \u2514\u2500\u2500 __init__.py \u251c\u2500\u2500 yearly \u2502 \u2514\u2500\u2500 __init__.py \u251c\u2500\u2500 __init__.py \u2514\u2500\u2500 sample.py Create a job \u00b6 A job is a Python script with a mandatory BaseJob class which extends from MinutelyJob , QuarterHourlyJob , HourlyJob , DailyJob , WeeklyJob , MonthlyJob or Yearly . It has one method that must be implemented called execute , which is called when the job is run. The directories hourly , daily , monthly , weekly and yearly are used only to for organisation purpose. Note: If you want to use QuarterHourlyJob or Minutely job, create python package with name quarter_hourly or minutely respectively (similar to hourly or daily package). To create your first job you can start copying sample.py . Remember to replace BaseJob with MinutelyJob , QuarterHourlyJob , HourlyJob , DailyJob , WeeklyJob , MonthlyJob or Yearly . Some simple examples are provided by the django_extensions.jobs package <https://github.com/django-extensions/django-extensions/tree/master/django_extensions/jobs> _. Note that each job should be in a new python script (within respective directory) and the class implementing the cron should be named Job . Also, __init__.py file is not used for identifying jobs. Run a job \u00b6 The following commands are related to jobs: create_jobs , create the directory structure for jobs runjob , run a single job runjobs , run all hourly/daily/weekly/monthly jobs Use \"runjob(s) -l\" to list all jobs recognized. Jobs do not run automatically! You must either run a job manually specifying the exact time on which the command is to be run, or use crontab: :: @hourly /path/to/my/project/manage.py runjobs hourly :: @daily /path/to/my/project/manage.py runjobs daily :: @weekly /path/to/my/project/manage.py runjobs weekly :: @monthly /path/to/my/project/manage.py runjobs monthly","title":"Jobs"},{"location":"jobs/jobs_scheduling/#jobs-scheduling","text":":synopsis: Documentation on creating/using jobs in RoundBox Creating jobs works much like management commands work in Django.","title":"Jobs Scheduling"},{"location":"jobs/jobs_scheduling/#setup","text":"Run :: $ python manage.py create_jobs <roundbox_application> to make a jobs directory inside of an application. The jobs directory will have the following tree:: jobs \u251c\u2500\u2500 daily \u2502 \u2514\u2500\u2500 __init__.py \u251c\u2500\u2500 hourly \u2502 \u2514\u2500\u2500 __init__.py \u251c\u2500\u2500 monthly \u2502 \u2514\u2500\u2500 __init__.py \u251c\u2500\u2500 weekly \u2502 \u2514\u2500\u2500 __init__.py \u251c\u2500\u2500 yearly \u2502 \u2514\u2500\u2500 __init__.py \u251c\u2500\u2500 __init__.py \u2514\u2500\u2500 sample.py","title":"Setup"},{"location":"jobs/jobs_scheduling/#create-a-job","text":"A job is a Python script with a mandatory BaseJob class which extends from MinutelyJob , QuarterHourlyJob , HourlyJob , DailyJob , WeeklyJob , MonthlyJob or Yearly . It has one method that must be implemented called execute , which is called when the job is run. The directories hourly , daily , monthly , weekly and yearly are used only to for organisation purpose. Note: If you want to use QuarterHourlyJob or Minutely job, create python package with name quarter_hourly or minutely respectively (similar to hourly or daily package). To create your first job you can start copying sample.py . Remember to replace BaseJob with MinutelyJob , QuarterHourlyJob , HourlyJob , DailyJob , WeeklyJob , MonthlyJob or Yearly . Some simple examples are provided by the django_extensions.jobs package <https://github.com/django-extensions/django-extensions/tree/master/django_extensions/jobs> _. Note that each job should be in a new python script (within respective directory) and the class implementing the cron should be named Job . Also, __init__.py file is not used for identifying jobs.","title":"Create a job"},{"location":"jobs/jobs_scheduling/#run-a-job","text":"The following commands are related to jobs: create_jobs , create the directory structure for jobs runjob , run a single job runjobs , run all hourly/daily/weekly/monthly jobs Use \"runjob(s) -l\" to list all jobs recognized. Jobs do not run automatically! You must either run a job manually specifying the exact time on which the command is to be run, or use crontab: :: @hourly /path/to/my/project/manage.py runjobs hourly :: @daily /path/to/my/project/manage.py runjobs daily :: @weekly /path/to/my/project/manage.py runjobs weekly :: @monthly /path/to/my/project/manage.py runjobs monthly","title":"Run a job"}]}